- repo: kyazdani42/nvim-web-devicons

- repo: glepnir/spaceline.vim
  on_event: [BufReadPre,BufNewFile]
  depends: nvim-web-devicons
  hook_add: |
    let g:spaceline_diagnostic_errorsign = ' '
    let g:spaceline_diagnostic_warnsign = ' '
    let g:spaceline_git_branch_icon = ' '
    let g:spaceline_custom_diff_icon = [' ',' ',' ']
    let g:spaceline_function_icon = ' '
    let g:spaceline_diagnostic_tool = 'nvim_lsp'
    let g:spaceline_diff_tool = 'vim-signify'

- repo: Akin909/nvim-bufferline.lua
  depends: nvim-web-devicons
  hook_add: |
    lua << EOF
    vim.g.bufferline_modified_icon = '✥'
    require'bufferline'.setup{
        options = {
          show_buffer_close_icons = false,
          mappings = true,
          always_show_bufferline = false,
        };
        highlights = {
          bufferline_tab_selected_separator = {
            guifg = "#4989c9",
            guibg = normal_bg,
          };
          bufferline_separator = {
            guibg = background_color,
          };
          bufferline_selected_indicator = {
            guifg = "#4989c9",
          };
          bufferline_selected = {
            guifg = normal_fg,
            gui = "bold",
          };
        };
      }
    EOF

- repo: glepnir/dashboard-nvim
  hook_source: |
    let g:dashboard_default_header = 'commicgirl5'
    let g:dashboard_default_executive ='clap'
    let g:dashboard_custom_section = {
      \ 'last_session'        :{
          \ 'description': ['  Recently laset session                  SPC s l'],
          \ 'command': 'SessionLoad'},
      \ 'find_history'        :{
          \ 'description': ['  Recently opened files                   SPC f h'],
          \ 'command': 'DashboardFindHistory'},
      \ 'find_file'           :{
          \ 'description': ['  Find  File                              SPC f f'],
          \ 'command': 'DashboardFindFile'},
      \ 'new_file'            :{
          \ 'description': ['  New   File                              SPC t f'],
          \ 'command': 'DashboardNewFile'},
      \ 'change_colorscheme'  :{
          \ 'description': ['  Change Colorscheme                      SPC t c'],
          \ 'command': 'DashboardChangeColorscheme'},
      \ 'find_word'           :{
          \ 'description': ['  Find  word                              SPC f w'],
          \ 'command': 'DashboardFindWord'},
      \ 'find_dotfiles'       :{
          \ 'description': ['  Open Personal dotfiles                  SPC f d'],
          \ 'command': 'Clap dotfiles'},
      \ 'go_source'           :{
          \ 'description': ['  Find Go Source Code                     SPC f s'],
          \ 'command': 'Clap gosource'},
      \}

- repo: Shougo/defx.nvim
  on_cmd: Defx
  hook_add: |
    autocmd FileType defx setlocal nonumber | setlocal norelativenumber
  hook_source: |
    call defx#custom#option('_', {
      \ 'resume': 1,
      \ 'winwidth': 30,
      \ 'split': 'vertical',
      \ 'direction': 'topleft',
      \ 'show_ignored_files': 0,
      \ 'columns': 'mark:indent:git:icons:filename',
      \ 'root_marker': '[in]: ',
      \ })
    call defx#custom#column('git', {
      \   'indicators': {
      \     'Modified'  : '•',
      \     'Staged'    : '✚',
      \     'Untracked' : 'ᵁ',
      \     'Renamed'   : '≫',
      \     'Unmerged'  : '≠',
      \     'Ignored'   : 'ⁱ',
      \     'Deleted'   : '✖',
      \     'Unknown'   : '⁇'
      \   }
      \ })
    " defx-icons plugin
    let g:defx_icons_column_length = 1
    let g:defx_icons_mark_icon = ''
    let g:defx_icons_parent_icon = ""
    call defx#custom#column('mark', { 'readonly_icon': '', 'selected_icon': '' })
    " Events
    " ---
    augroup user_plugin_defx
      autocmd!
      " Define defx window mappings
      autocmd FileType defx call <SID>defx_mappings()
      " Delete defx if it's the only buffer left in the window
      autocmd WinEnter * if &filetype == 'defx' && winnr('$') == 1 | bdel | endif
      " Move focus to the next window if current buffer is defx
      autocmd TabLeave * if &filetype == 'defx' | wincmd w | endif
    augroup END
    " Internal functions
    " ---
    function! s:jump_dirty(dir) abort
      " Jump to the next position with defx-git dirty symbols
      let l:icons = get(g:, 'defx_git_indicators', {})
      let l:icons_pattern = join(values(l:icons), '\|')
      if ! empty(l:icons_pattern)
        let l:direction = a:dir > 0 ? 'w' : 'bw'
        return search(printf('\(%s\)', l:icons_pattern), l:direction)
      endif
    endfunction
    function! s:defx_toggle_tree() abort
      " Open current file, or toggle directory expand/collapse
      if defx#is_directory()
        return defx#do_action('open_or_close_tree')
      endif
      return defx#do_action('multi', ['drop'])
    endfunction
    function! s:defx_mappings() abort
      " Defx window keyboard mappings
      setlocal signcolumn=no expandtab
      nnoremap <silent><buffer><expr> <CR>  defx#do_action('drop')
      nnoremap <silent><buffer><expr> l     <sid>defx_toggle_tree()
      nnoremap <silent><buffer><expr> h     defx#async_action('cd', ['..'])
      nnoremap <silent><buffer><expr> st    defx#do_action('multi', [['drop', 'tabnew'], 'quit'])
      nnoremap <silent><buffer><expr> s     defx#do_action('open', 'botright vsplit')
      nnoremap <silent><buffer><expr> i     defx#do_action('open', 'botright split')
      nnoremap <silent><buffer><expr> P     defx#do_action('preview')
      nnoremap <silent><buffer><expr> K     defx#do_action('new_directory')
      nnoremap <silent><buffer><expr> N     defx#do_action('new_multiple_files')
      nnoremap <silent><buffer><expr> dd    defx#do_action('remove_trash')
      nnoremap <silent><buffer><expr> r     defx#do_action('rename')
      nnoremap <silent><buffer><expr> x     defx#do_action('execute_system')
      nnoremap <silent><buffer><expr> .     defx#do_action('toggle_ignored_files')
      nnoremap <silent><buffer><expr> yy    defx#do_action('yank_path')
      nnoremap <silent><buffer><expr> ~     defx#async_action('cd')
      nnoremap <silent><buffer><expr> q     defx#do_action('quit')
      nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ?
        \ ':<C-u>wincmd w<CR>' :
        \ ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
      " Defx's buffer management
      nnoremap <silent><buffer><expr> q      defx#do_action('quit')
      nnoremap <silent><buffer><expr> se     defx#do_action('save_session')
      nnoremap <silent><buffer><expr> <C-r>  defx#do_action('redraw')
      nnoremap <silent><buffer><expr> <C-g>  defx#do_action('print')
      " File/dir management
      nnoremap <silent><buffer><expr><nowait> c  defx#do_action('copy')
      nnoremap <silent><buffer><expr><nowait> m  defx#do_action('move')
      nnoremap <silent><buffer><expr><nowait> p  defx#do_action('paste')
      nnoremap <silent><buffer><expr><nowait> r  defx#do_action('rename')
      nnoremap <silent><buffer><expr> dd defx#do_action('remove_trash')
      nnoremap <silent><buffer><expr> K  defx#do_action('new_directory')
      nnoremap <silent><buffer><expr> N  defx#do_action('new_multiple_files')
      " Jump
      nnoremap <silent><buffer>  [g :<C-u>call <SID>jump_dirty(-1)<CR>
      nnoremap <silent><buffer>  ]g :<C-u>call <SID>jump_dirty(1)<CR>
      " Change directory
      nnoremap <silent><buffer><expr><nowait> \  defx#do_action('cd', getcwd())
      nnoremap <silent><buffer><expr><nowait> &  defx#do_action('cd', getcwd())
      nnoremap <silent><buffer><expr> <BS>  defx#async_action('cd', ['..'])
      nnoremap <silent><buffer><expr> ~     defx#async_action('cd')
      nnoremap <silent><buffer><expr> u   defx#do_action('cd', ['..'])
      nnoremap <silent><buffer><expr> 2u  defx#do_action('cd', ['../..'])
      nnoremap <silent><buffer><expr> 3u  defx#do_action('cd', ['../../..'])
      nnoremap <silent><buffer><expr> 4u  defx#do_action('cd', ['../../../..'])
      " Selection
      nnoremap <silent><buffer><expr> *  defx#do_action('toggle_select_all')
      nnoremap <silent><buffer><expr><nowait> <Space>
        \ defx#do_action('toggle_select') . 'j'
      nnoremap <silent><buffer><expr> S  defx#do_action('toggle_sort', 'Time')
      nnoremap <silent><buffer><expr> C
        \ defx#do_action('toggle_columns', 'indent:mark:filename:type:size:time')
    endfunction

- repo: kristijanhusak/defx-git
  on_source: defx.nvim

- repo: kristijanhusak/defx-icons
  on_source: defx.nvim
