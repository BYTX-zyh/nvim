- repo: tpope/vim-dadbod

- repo: kristijanhusak/vim-dadbod-ui
  on_cmd:
    [DBUIToggle, DBUIAddConnection, DBUI, DBUIFindBuffer, DBUIRenameBuffer]
  on_source: vim-dadbod
  hook_source: |
    let g:db_ui_show_help = 0
    let g:db_ui_win_position = 'left'
    let g:db_ui_use_nerd_fonts = 1
    let g:db_ui_winwidth = 35
    let g:db_ui_save_location = getenv("HOME") . '/.cache/vim/db_ui_queries'
    let g:dbs = luaeval('require("internal.selfunc").load_dbs')()

- repo: editorconfig/editorconfig-vim
  on_ft: [go, typescript, javascript, vim, rust, markdown]

- repo: glepnir/indent-guides.nvim
  on_event: BufReadPre
  hook_source: |-
    lua <<EOF
      require('indent_guides').default_opts.indent_guide_size =1
      require('indent_guides').default_opts.exclude_filetypes = {'defx','vista'}
    EOF

# - repo: nathanaelkane/vim-indent-guides
#   on_event: BufReadPre
#   hook_post_source: IndentGuidesEnable
#   hook_add: |-
#     let g:indent_guides_default_mapping = 0
#     let g:indent_guides_tab_guides = 0
#     let g:indent_guides_color_change_percent = 3
#     let g:indent_guides_guide_size = 1
#     let g:indent_guides_exclude_filetypes = [
#       \ 'help', 'defx', 'denite', 'denite-filter', 'startify',
#       \ 'vista', 'vista_kind', 'tagbar', 'lsp-hover', 'clap_input',
#       \ 'any-jump', 'gina-status', 'gina-commit', 'dashboard','terminal']

- repo: tyru/caw.vim
  depends: context_filetype.vim
  on_map: { nx: <Plug> }
  hook_add: |
    function! InitCaw() abort
      if !&l:modifiable
        silent! nunmap <buffer> gc
        silent! xunmap <buffer> gc
        silent! nunmap <buffer> gcc
        silent! xunmap <buffer> gcc
      else
        nmap <buffer> gc <Plug>(caw:prefix)
        xmap <buffer> gc <Plug>(caw:prefix)
        nmap <buffer> gcc <Plug>(caw:hatpos:toggle)
        xmap <buffer> gcc <Plug>(caw:hatpos:toggle)
      endif
    endfunction
    autocmd FileType * call InitCaw()
    call InitCaw()

- repo: liuchengxu/vista.vim
  on_cmd: [Vista, Vista!, Vista!!]
  hook_source: |
    let g:vista#renderer#enable_icon = 1
    let g:vista_disable_statusline = 1
    let g:vista_default_executive = 'ctags'
    let g:vista_echo_cursor_strategy = 'floating_win'
    let g:vista_vimwiki_executive = 'markdown'
    let g:vista_executive_for = {
      \ 'vimwiki': 'markdown',
      \ 'pandoc': 'markdown',
      \ 'markdown': 'toc',
      \ 'typescript': 'nvim_lsp',
      \ 'typescriptreact': 'nvim_lsp',
      \ }

- repo: ludovicchabant/vim-gutentags
  if: executable('ctags')
  on_event: [BufReadPost, BufWritePost]
  hook_source: |
    let g:gutentags_cache_dir = getenv("HOME").'/.cache/vim/tags'
    let g:gutentags_project_root = ['.root', '.git', '.svn','.project','go.mod','.Cargo.toml','tsconfig.js','jsconfig.js']
    let g:gutentags_generate_on_write = 0
    let g:gutentags_generate_on_missing = 0
    let g:gutentags_generate_on_new = 0
    let g:gutentags_exclude_filetypes = [ 'defx', 'denite', 'vista', 'magit' ]

- repo: mhartington/formatter.nvim
  on_fg: [typescript,typescriptreact,lua]
  on_cmd: Format
  hook_source: |
    lua <<EOF
      require('format').setup({
        typescriptreact = {
            prettier = function()
              return {
                exe = "prettier",
                args = {"--stdin-filepath", vim.api.nvim_buf_get_name(0), '--single-quote'},
                stdin = true
              }
            end
        },
        lua = {
            luafmt = function()
              return {
                exe = "luafmt",
                args = {"--indent-count", 2, "--stdin"},
                stdin = true
                }
              end
            }
        })
    EOF
